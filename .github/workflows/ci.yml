name: ci-cd

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:4.4.6
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ vars.MONGODB_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
          MONGO_INITDB_DATABASE: main
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ^1.23.4
        id: go

      - name: Check out code into the Go module directory.
        uses: actions/checkout@v4

      - name: Create .env file from secrets and variables
        run: |
          echo "APP_ENV=${{vars.APP_ENV}}" >> .env
          echo "MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}" >> .env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "SERVER_PORT= ${{vars.SERVER_PORT}}" >> .env
          echo "ALLOWED_CHARS=${{vars.ALLOWED_CHARS}}" >> .env
          echo "SHORT_CODE_LENGTH=${{vars.SHORT_CODE_LENGTH}}" >> .env

      - name: Test
        run: make test

  build-and-push-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS  }}

      - name: Configure Docker to user Google Artifact Registry
        run: gcloud auth configure-docker ${{vars.ARTIFACT_REGISTRY_REGION}}-docker.pkg.dev

      - name: Create .env file from secrets and variables
        run: |
          echo "APP_ENV=${{vars.APP_ENV}}" >> .env
          echo "MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}" >> .env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "SERVER_PORT= ${{vars.SERVER_PORT}}" >> .env
          echo "ALLOWED_CHARS=${{vars.ALLOWED_CHARS}}" >> .env
          echo "SHORT_CODE_LENGTH=${{vars.SHORT_CODE_LENGTH}}" >> .env

      - name: Build and push Docker image
        run: |
          docker build -t ${{ vars.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY_REPO }}/url-shortener:${{ github.sha }} .
          docker push ${{ vars.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY_REPO }}/url-shortener:${{ github.sha }}

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push-image

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS  }}

      - name: Deploy to Cloud Run
        run: |
          echo "Executing command:"
          echo "gcloud run deploy url-shortener --image ${{ vars.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY_REPO }}/url-shortener:${{ github.sha }} --platform managed --region ${{ vars.ARTIFACT_REGISTRY_REGION }} --allow-unauthenticated --service-account ${{ vars.CLOUD_RUN_SERVICE_ACCOUNT }}"
          gcloud run deploy url-shortener \
            --image ${{ vars.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY_REPO }}/url-shortener:${{ github.sha }} \
            --platform managed \
            --region=${{ vars.ARTIFACT_REGISTRY_REGION }} \
            --set-env-vars=SPRING_PROFILES_ACTIVE=cloudrun
            --concurrency=80
            --service-account=cloud-run-runtime@vegax-429008.iam.gserviceaccount.com
            --allow-unauthenticated
            --verbosity=debug
